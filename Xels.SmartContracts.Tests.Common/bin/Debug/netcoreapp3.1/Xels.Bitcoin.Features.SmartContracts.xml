<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Xels.Bitcoin.Features.SmartContracts</name>
    </assembly>
    <members>
        <member name="T:Xels.Bitcoin.Features.SmartContracts.ApiLogDeserializer">
            <summary>
            Deserializer for smart contract event logs. 
            </summary>
        </member>
        <member name="M:Xels.Bitcoin.Features.SmartContracts.ApiLogDeserializer.DeserializeLogData(System.Byte[],System.Type)">
            <summary>
            Deserializes event log data. Uses the supplied type to determine field information and attempts to deserialize these
            fields from the supplied data. For <see cref="T:Xels.SmartContracts.Address"/> types, an additional conversion to a base58 string is applied.
            </summary>
            <param name="bytes">The raw event log data.</param>
            <param name="type">The type to attempt to deserialize.</param>
            <returns>An <see cref="T:System.Dynamic.ExpandoObject"/> containing the fields of the Type and its deserialized values.</returns>
        </member>
        <member name="M:Xels.Bitcoin.Features.SmartContracts.Caching.IBlockExecutionResultCache.GetExecutionResult(NBitcoin.uint256)">
             <summary>
             Get all the execution results for a mined block.
            
             Returns null if the block does not exist in the cache, i.e. it was not mined on this node.
             </summary>
        </member>
        <member name="M:Xels.Bitcoin.Features.SmartContracts.Caching.IBlockExecutionResultCache.StoreExecutionResult(NBitcoin.uint256,Xels.Bitcoin.Features.SmartContracts.Caching.BlockExecutionResultModel)">
            <summary>
            Store all the execution results for a mined block.
            </summary>
        </member>
        <member name="M:Xels.Bitcoin.Features.SmartContracts.Caching.BlockExecutionResultCache.GetExecutionResult(NBitcoin.uint256)">
            <inheritdoc />
        </member>
        <member name="M:Xels.Bitcoin.Features.SmartContracts.Caching.BlockExecutionResultCache.StoreExecutionResult(NBitcoin.uint256,Xels.Bitcoin.Features.SmartContracts.Caching.BlockExecutionResultModel)">
            <inheritdoc />
        </member>
        <member name="T:Xels.Bitcoin.Features.SmartContracts.Caching.BlockExecutionResultModel">
            <summary>
            Contains information that was obtained through execution of a single block's smart contracts.
            </summary>
        </member>
        <member name="M:Xels.Bitcoin.Features.SmartContracts.Extensions.GetSmartContractExecTransactions(System.Collections.Generic.IEnumerable{NBitcoin.Transaction})">
            <summary>
            Filters all transactions for those with smart contract exec opcodes
            A transaction should only have one smart contract exec output
            </summary>
        </member>
        <member name="M:Xels.Bitcoin.Features.SmartContracts.Extensions.GetSmartContractCreateTransactions(System.Collections.Generic.IEnumerable{NBitcoin.Transaction})">
            <summary>
            Filters all transactions for those with contract create opcodes. 
            </summary>
        </member>
        <member name="M:Xels.Bitcoin.Features.SmartContracts.Extensions.IsSmartContractExecTransaction(NBitcoin.Transaction)">
            <summary>
            Whether the transaction has any outputs with ScriptPubKeys that are smart contract executions.
            </summary>
        </member>
        <member name="M:Xels.Bitcoin.Features.SmartContracts.Extensions.IsSmartContractCreateTransaction(NBitcoin.Transaction)">
            <summary>
            Whether the transaction has any outputs with ScriptPubKeys that are smart contract creations.
            </summary>
        </member>
        <member name="M:Xels.Bitcoin.Features.SmartContracts.Extensions.IsSmartContractSpendTransaction(NBitcoin.Transaction)">
            <summary>
            Whether the transaction has any inputs with ScriptSigs that are OP_SPENDS.
            </summary>
        </member>
        <member name="M:Xels.Bitcoin.Features.SmartContracts.Extensions.TryGetSmartContractTxOut(NBitcoin.Transaction)">
            <summary>
            Return the <see cref="T:NBitcoin.TxOut"/> of the transaction that contains smart contract.
            <para>
            There is only allowed to be 1 per transaction .
            </para>
            </summary>
        </member>
        <member name="T:Xels.Bitcoin.Features.SmartContracts.IBlockBufferGenerator">
            <summary>
            Works out how much room needs to be left at the start of the block as a buffer for protocol transactions.
            </summary>
        </member>
        <member name="T:Xels.Bitcoin.Features.SmartContracts.Rules.IContractTransactionValidationRule">
            <summary>
            Holds logic for validating a specific property of smart contract transactions.
            </summary>
        </member>
        <member name="M:Xels.Bitcoin.Features.SmartContracts.Rules.IContractTransactionValidationRule.CheckContractTransaction(Xels.SmartContracts.CLR.ContractTxData,NBitcoin.Money)">
            <summary>
            Ensures that a transaction is valid, throwing a <see cref="T:Xels.Bitcoin.Consensus.ConsensusError"/> otherwise.
            </summary>
            <param name="txData">The included transaction data.</param>
            <param name="suppliedBudget">The total amount sent as the protocol fee.</param>
        </member>
        <member name="T:Xels.Bitcoin.Features.SmartContracts.Rules.AllowedScriptTypeRule">
            <summary>
            Enforces that only certain script types are used on the network.
            </summary>
        </member>
        <member name="M:Xels.Bitcoin.Features.SmartContracts.Rules.AllowedScriptTypeRule.RunAsync(Xels.Bitcoin.Consensus.Rules.RuleContext)">
            <inheritdoc/>
        </member>
        <member name="M:Xels.Bitcoin.Features.SmartContracts.Rules.CanGetSenderRule.RunAsync(Xels.Bitcoin.Consensus.Rules.RuleContext)">
            <inheritdoc />
        </member>
        <member name="T:Xels.Bitcoin.Features.SmartContracts.Rules.ContractTransactionChecker">
            <summary>
            Shared logic for checking a contract transaction against a set of rules.
            </summary>
        </member>
        <member name="M:Xels.Bitcoin.Features.SmartContracts.Rules.ContractTransactionChecker.RunAsync(Xels.Bitcoin.Consensus.Rules.RuleContext,System.Collections.Generic.IEnumerable{Xels.Bitcoin.Features.SmartContracts.Rules.IContractTransactionValidationRule})">
            <summary>
            Executes the set of <see cref="T:Xels.Bitcoin.Features.SmartContracts.Rules.IContractTransactionValidationRule"/> rules.
            </summary>
        </member>
        <member name="T:Xels.Bitcoin.Features.SmartContracts.Rules.ContractTransactionFullValidationRule">
            <summary>
            Checks that smart contract transactions are in a valid format and the data is serialized correctly.
            </summary>
        </member>
        <member name="F:Xels.Bitcoin.Features.SmartContracts.Rules.ContractTransactionFullValidationRule.internalRules">
            <summary>The rules are kept in a covariant interface.</summary>
        </member>
        <member name="M:Xels.Bitcoin.Features.SmartContracts.Rules.ContractTransactionFullValidationRule.RunAsync(Xels.Bitcoin.Consensus.Rules.RuleContext)">
            <inheritdoc/>
        </member>
        <member name="T:Xels.Bitcoin.Features.SmartContracts.Rules.ContractTransactionPartialValidationRule">
            <summary>
            Checks that smart contract transactions are in a valid format and the data is serialized correctly.
            </summary>
        </member>
        <member name="M:Xels.Bitcoin.Features.SmartContracts.Rules.ContractTransactionPartialValidationRule.RunAsync(Xels.Bitcoin.Consensus.Rules.RuleContext)">
            <inheritdoc/>
        </member>
        <member name="T:Xels.Bitcoin.Features.SmartContracts.Rules.OpSpendRule">
            <summary>
            If a transaction's inputs contain an OP_SPEND opcode in the scriptsig, check that the transaction
            that occurs directly before contains OP_CREATE or OP_CALL in its outputs. In conjunction with
            <see cref="!:MempoolOpSpendRule"/>, ensures that only a contract execution transaction is able to
            create OP_SPEND inputs.
            </summary>
        </member>
        <member name="M:Xels.Bitcoin.Features.SmartContracts.Rules.OpSpendRule.RunAsync(Xels.Bitcoin.Consensus.Rules.RuleContext)">
            <inheritdoc/>
        </member>
        <member name="T:Xels.Bitcoin.Features.SmartContracts.Rules.P2PKHNotContractRule">
            <summary>
            Used to check that people don't try and send funds to contracts via P2PKH.
            </summary>
        </member>
        <member name="M:Xels.Bitcoin.Features.SmartContracts.Rules.P2PKHNotContractRule.RunAsync(Xels.Bitcoin.Consensus.Rules.RuleContext)">
            <inheritdoc/>
        </member>
        <member name="T:Xels.Bitcoin.Features.SmartContracts.Rules.SmartContractCoinviewRule">
            <inheritdoc />
        </member>
        <member name="M:Xels.Bitcoin.Features.SmartContracts.Rules.SmartContractCoinviewRule.Initialize">
            <inheritdoc />
        </member>
        <member name="M:Xels.Bitcoin.Features.SmartContracts.Rules.SmartContractCoinviewRule.RunAsync(Xels.Bitcoin.Consensus.Rules.RuleContext)">
            <inheritdoc />
        </member>
        <member name="M:Xels.Bitcoin.Features.SmartContracts.Rules.SmartContractCoinviewRule.CheckInput(NBitcoin.Transaction,System.Int32,NBitcoin.TxOut,NBitcoin.PrecomputedTransactionData,NBitcoin.TxIn,Xels.Bitcoin.Base.Deployments.DeploymentFlags)">
            <inheritdoc/>
        </member>
        <member name="M:Xels.Bitcoin.Features.SmartContracts.Rules.SmartContractCoinviewRule.CheckBlockReward(Xels.Bitcoin.Consensus.Rules.RuleContext,NBitcoin.Money,System.Int32,NBitcoin.Block)">
            <inheritdoc/>
        </member>
        <member name="M:Xels.Bitcoin.Features.SmartContracts.Rules.SmartContractCoinviewRule.CheckMaturity(Xels.Bitcoin.Utilities.UnspentOutputs,System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Xels.Bitcoin.Features.SmartContracts.Rules.SmartContractCoinviewRule.GetProofOfWorkReward(System.Int32)">
            <inheritdoc />
            <remarks>Should someone wish to use POW only we'll need to implement subsidy halving.</remarks>
        </member>
        <member name="M:Xels.Bitcoin.Features.SmartContracts.Rules.SmartContractCoinviewRule.UpdateCoinView(Xels.Bitcoin.Consensus.Rules.RuleContext,NBitcoin.Transaction)">
            <summary>
            Executes contracts as necessary and updates the coinview / UTXOset after execution.
            </summary>
            <inheritdoc/>
        </member>
        <member name="M:Xels.Bitcoin.Features.SmartContracts.Rules.SmartContractCoinviewRule.ValidateGeneratedTransaction(NBitcoin.Transaction)">
            <summary>
            Validates that any condensing transaction matches the transaction generated during execution
            </summary>
            <param name="transaction">The generated transaction to validate.</param>
        </member>
        <member name="M:Xels.Bitcoin.Features.SmartContracts.Rules.SmartContractCoinviewRule.ValidateSubmittedTransaction(NBitcoin.Transaction)">
            <summary>
            Validates that a submitted transaction doesn't contain illegal operations.
            </summary>
            <param name="transaction">The submitted transaction to validate.</param>
        </member>
        <member name="M:Xels.Bitcoin.Features.SmartContracts.Rules.SmartContractCoinviewRule.ExecuteContractTransaction(Xels.Bitcoin.Consensus.Rules.RuleContext,NBitcoin.Transaction)">
            <summary>Executes the smart contract part of a transaction.</summary>
        </member>
        <member name="T:Xels.Bitcoin.Features.SmartContracts.Rules.SmartContractCoinViewRuleLogic">
            <summary>
            Abstraction for shared SC coinview rule logic. 
            TODO: Long-term solution requires refactoring of the FN CoinViewRule implementation.
            </summary>
        </member>
        <member name="M:Xels.Bitcoin.Features.SmartContracts.Rules.SmartContractCoinViewRuleLogic.UpdateCoinView(System.Action{Xels.Bitcoin.Consensus.Rules.RuleContext,NBitcoin.Transaction},Xels.Bitcoin.Consensus.Rules.RuleContext,NBitcoin.Transaction)">
            <summary>
            Executes contracts as necessary and updates the coinview / UTXOset after execution.
            </summary>
        </member>
        <member name="M:Xels.Bitcoin.Features.SmartContracts.Rules.SmartContractCoinViewRuleLogic.ValidateGeneratedTransaction(NBitcoin.Transaction)">
            <summary>
            Validates that any condensing transaction matches the transaction generated during execution
            </summary>
            <param name="transaction">The generated transaction to validate.</param>
        </member>
        <member name="M:Xels.Bitcoin.Features.SmartContracts.Rules.SmartContractCoinViewRuleLogic.ValidateSubmittedTransaction(NBitcoin.Transaction)">
            <summary>
            Validates that a submitted transaction doesn't contain illegal operations.
            </summary>
            <param name="transaction">The submitted transaction to validate.</param>
        </member>
        <member name="M:Xels.Bitcoin.Features.SmartContracts.Rules.SmartContractCoinViewRuleLogic.ValidateRefunds(NBitcoin.TxOut,NBitcoin.Transaction)">
            <summary>
            Throws a consensus exception if the gas refund inside the block is different to what this node calculated during execution.
            </summary>
        </member>
        <member name="M:Xels.Bitcoin.Features.SmartContracts.Rules.SmartContractCoinViewRuleLogic.ExecuteContractTransaction(Xels.Bitcoin.Consensus.Rules.RuleContext,NBitcoin.Transaction)">
            <summary>
            Executes the smart contract part of a transaction
            </summary>
        </member>
        <member name="M:Xels.Bitcoin.Features.SmartContracts.Rules.SmartContractCoinViewRuleLogic.CheckBlockGasLimit(System.UInt64)">
            <summary>
            Update the total gas expenditure for this block and verify that it has not exceeded the limit.
            </summary>
            <param name="txGasConsumed">The amount of gas spent executing the smart contract transaction.</param>
        </member>
        <member name="M:Xels.Bitcoin.Features.SmartContracts.Rules.SmartContractCoinViewRuleLogic.CheckFeeAccountsForGas(System.Byte[],NBitcoin.Money)">
            <summary>
            Check that the fee is large enough to account for the potential contract gas usage.
            </summary>
        </member>
        <member name="M:Xels.Bitcoin.Features.SmartContracts.Rules.SmartContractCoinViewRuleLogic.GetSmartContractTransactionContext(Xels.Bitcoin.Consensus.Rules.RuleContext,NBitcoin.Transaction)">
            <summary>
            Retrieves the context object to be given to the contract executor.
            </summary>
        </member>
        <member name="M:Xels.Bitcoin.Features.SmartContracts.Rules.SmartContractCoinViewRuleLogic.ValidateAndStoreReceipts(NBitcoin.uint256)">
            <summary>
            Throws a consensus exception if the receipt roots don't match.
            </summary>
        </member>
        <member name="T:Xels.Bitcoin.Features.SmartContracts.Rules.TxOutSmartContractExecRule">
            <summary>
            Each transaction should have only 1 'SmartContractExec' output.
            </summary>
        </member>
        <member name="M:Xels.Bitcoin.Features.SmartContracts.Rules.TxOutSmartContractExecRule.RunAsync(Xels.Bitcoin.Consensus.Rules.RuleContext)">
            <inheritdoc/>
        </member>
        <member name="T:Xels.Bitcoin.Features.SmartContracts.ISignedCodePubKeyHolder">
            <summary>
            Marks a smart contract network that has the requirement that contracts must be signed.
            </summary>
        </member>
        <member name="P:Xels.Bitcoin.Features.SmartContracts.ISignedCodePubKeyHolder.SigningContractPubKey">
            <summary>
            The public key for the private key that contracts must be signed by.
            </summary>
        </member>
        <member name="T:Xels.Bitcoin.Features.SmartContracts.MempoolRules.AllowedScriptTypeMempoolRule">
            <summary>
            Enforces that only certain script types are used on the network.
            </summary>
            <remarks>Shares logic with the consensus rule <see cref="T:Xels.Bitcoin.Features.SmartContracts.Rules.AllowedScriptTypeRule"/></remarks>
        </member>
        <member name="M:Xels.Bitcoin.Features.SmartContracts.MempoolRules.AllowedScriptTypeMempoolRule.CheckTransaction(Xels.Bitcoin.Features.MemoryPool.MempoolValidationContext)">
            <inheritdoc/>
        </member>
        <member name="M:Xels.Bitcoin.Features.SmartContracts.MempoolRules.CanGetSenderMempoolRule.CheckTransaction(Xels.Bitcoin.Features.MemoryPool.MempoolValidationContext)">
            <inheritdoc/>
        </member>
        <member name="M:Xels.Bitcoin.Features.SmartContracts.MempoolRules.CheckMinGasLimitSmartContractMempoolRule.CheckTransaction(Xels.Bitcoin.Features.MemoryPool.MempoolValidationContext)">
            <inheritdoc/>
        </member>
        <member name="T:Xels.Bitcoin.Features.SmartContracts.MempoolRules.OpSpendMempoolRule">
            <summary>
            Checks that transactions sent to the mempool don't include the OP_SPEND opcode.
            </summary>
        </member>
        <member name="M:Xels.Bitcoin.Features.SmartContracts.MempoolRules.OpSpendMempoolRule.CheckTransaction(Xels.Bitcoin.Features.MemoryPool.MempoolValidationContext)">
            <inheritdoc/>
        </member>
        <member name="T:Xels.Bitcoin.Features.SmartContracts.MempoolRules.P2PKHNotContractMempoolRule">
            <summary>
            Used to check that people don't try and send funds to contracts via P2PKH.
            </summary>
        </member>
        <member name="M:Xels.Bitcoin.Features.SmartContracts.MempoolRules.P2PKHNotContractMempoolRule.CheckTransaction(Xels.Bitcoin.Features.MemoryPool.MempoolValidationContext)">
            <inheritdoc/>
        </member>
        <member name="T:Xels.Bitcoin.Features.SmartContracts.MempoolRules.TxOutSmartContractExecMempoolRule">
            <summary>
            Each transaction should have only 1 'SmartContractExec' output.
            </summary>
        </member>
        <member name="M:Xels.Bitcoin.Features.SmartContracts.MempoolRules.TxOutSmartContractExecMempoolRule.CheckTransaction(Xels.Bitcoin.Features.MemoryPool.MempoolValidationContext)">
            <inheritdoc/>
        </member>
        <member name="T:Xels.Bitcoin.Features.SmartContracts.PoA.MempoolRules.SmartContractFormatLogicMempoolRule">
            <summary>
            Validates that a smart contract transaction can be deserialized correctly, and that it conforms to gas
            price and gas limit rules.
            </summary>
        </member>
        <member name="M:Xels.Bitcoin.Features.SmartContracts.PoA.MempoolRules.SmartContractFormatLogicMempoolRule.CheckTransaction(Xels.Bitcoin.Features.MemoryPool.MempoolValidationContext)">
            <inheritdoc/>
        </member>
        <member name="T:Xels.Bitcoin.Features.SmartContracts.PoA.MempoolRules.AllowedCodeHashLogicMempoolRule">
            <summary>
            Validates that the hash of the supplied smart contract code is contained in a list of supplied hashes.
            </summary>
            <remarks>Should have the same logic as consensus rule <see cref="T:Xels.Bitcoin.Features.SmartContracts.PoA.Rules.AllowedCodeHashLogic"/>.</remarks>
        </member>
        <member name="M:Xels.Bitcoin.Features.SmartContracts.PoA.MempoolRules.AllowedCodeHashLogicMempoolRule.CheckTransaction(Xels.Bitcoin.Features.MemoryPool.MempoolValidationContext)">
            <inheritdoc/>
        </member>
        <member name="M:Xels.Bitcoin.Features.SmartContracts.PoA.IFullNodeBuilderExtensions.UseSmartContractPoAConsensus(Xels.Bitcoin.Builder.IFullNodeBuilder)">
            <summary>
            Configures the node with the smart contract proof of authority consensus model.
            </summary>
        </member>
        <member name="M:Xels.Bitcoin.Features.SmartContracts.PoA.IFullNodeBuilderExtensions.UseSmartContractPoAMining(Xels.Bitcoin.Builder.IFullNodeBuilder)">
            <summary>
            Adds mining to the smart contract node when on a proof-of-authority network.
            </summary>
        </member>
        <member name="T:Xels.Bitcoin.Features.SmartContracts.PoA.Keccak256CodeHashingStrategy">
            <summary>
            Hashes data using Keccak256.
            </summary>
        </member>
        <member name="M:Xels.Bitcoin.Features.SmartContracts.PoA.Keccak256CodeHashingStrategy.Hash(System.Byte[])">
            <summary>
            Hashes the supplied byte array using Keccak256.
            </summary>
            <param name="data">The data to hash.</param>
            <returns>The Keccak256 hash of the data.</returns>
        </member>
        <member name="T:Xels.Bitcoin.Features.SmartContracts.PoA.Rules.AllowedCodeHashLogic">
            <summary>
            Validates that the hash of the supplied smart contract code is contained in a list of supplied hashes.
            </summary>
        </member>
        <member name="M:Xels.Bitcoin.Features.SmartContracts.PoA.Rules.SmartContractPoACoinviewRule.Initialize">
            <inheritdoc />
        </member>
        <member name="M:Xels.Bitcoin.Features.SmartContracts.PoA.Rules.SmartContractPoACoinviewRule.RunAsync(Xels.Bitcoin.Consensus.Rules.RuleContext)">
            <inheritdoc />
        </member>
        <member name="M:Xels.Bitcoin.Features.SmartContracts.PoA.Rules.SmartContractPoACoinviewRule.CheckInput(NBitcoin.Transaction,System.Int32,NBitcoin.TxOut,NBitcoin.PrecomputedTransactionData,NBitcoin.TxIn,Xels.Bitcoin.Base.Deployments.DeploymentFlags)">
            <inheritdoc/>
        </member>
        <member name="M:Xels.Bitcoin.Features.SmartContracts.PoA.Rules.SmartContractPoACoinviewRule.UpdateCoinView(Xels.Bitcoin.Consensus.Rules.RuleContext,NBitcoin.Transaction)">
            <summary>
            Executes contracts as necessary and updates the coinview / UTXOset after execution.
            </summary>
            <inheritdoc/>
        </member>
        <member name="T:Xels.Bitcoin.Features.SmartContracts.PoA.SmartContractPoABlockDefinition">
            <summary>
            Pushes everything to the <see cref="T:Xels.Bitcoin.Features.SmartContracts.PoW.SmartContractBlockDefinition"/>, just amends the block difficulty for PoA.
            </summary>
        </member>
        <member name="M:Xels.Bitcoin.Features.SmartContracts.PoA.SmartContractPoABlockDefinition.UpdateHeaders">
            <inheritdoc/>
        </member>
        <member name="F:Xels.Bitcoin.Features.SmartContracts.PoA.SmartContractPoABlockHeader.hashStateRoot">
            <summary>
            Root of the state trie after execution of this block. 
            </summary>
        </member>
        <member name="F:Xels.Bitcoin.Features.SmartContracts.PoA.SmartContractPoABlockHeader.receiptRoot">
            <summary>
            Root of the receipt trie after execution of this block.
            </summary>
        </member>
        <member name="F:Xels.Bitcoin.Features.SmartContracts.PoA.SmartContractPoABlockHeader.logsBloom">
            <summary>
            Bitwise-OR of all the blooms generated from all of the smart contract transactions in the block.
            </summary>
        </member>
        <member name="M:Xels.Bitcoin.Features.SmartContracts.PoA.SmartContractPoABlockHeader.ReadWriteHashingStream(NBitcoin.BitcoinStream)">
            <inheritdoc />  
        </member>
        <member name="M:Xels.Bitcoin.Features.SmartContracts.PoA.SmartContractPoAConsensusFactory.CreateBlockHeader">
            <inheritdoc />
        </member>
        <member name="M:Xels.Bitcoin.Features.SmartContracts.PoA.SmartContractCollateralPoAConsensusFactory.CreateBlockHeader">
            <inheritdoc />
        </member>
        <member name="M:Xels.Bitcoin.Features.SmartContracts.PoA.WhitelistedContractExtensions.UsePoAWhitelistedContracts(Xels.Bitcoin.Features.SmartContracts.SmartContractOptions)">
            <summary>
            Adds a consensus rule ensuring only contracts with hashes that are on the PoA whitelist are able to be deployed.
            The PoA feature must be installed for this to function correctly.
            </summary>
            <param name="options">The smart contract options.</param>
            <returns>The options provided.</returns>
        </member>
        <member name="T:Xels.Bitcoin.Features.SmartContracts.PoA.WhitelistedHashChecker">
            <summary>
            Checks hashes against a whitelist.
            </summary>
        </member>
        <member name="M:Xels.Bitcoin.Features.SmartContracts.PoA.WhitelistedHashChecker.CheckHashWhitelisted(System.Byte[])">
            <summary>
            Checks that a supplied hash is present in the whitelisted hashes repository.
            </summary>
            <param name="hash">The bytes of the hash to check.</param>
            <returns>True if the hash was found in the whitelisted hashes repository.</returns>
        </member>
        <member name="T:Xels.Bitcoin.Features.SmartContracts.Models.BuildCallContractTransactionRequest">
            <summary>
            A class containing the necessary parameters to perform a smart contract method call request.
            </summary>
        </member>
        <member name="P:Xels.Bitcoin.Features.SmartContracts.Models.BuildCallContractTransactionRequest.WalletName">
            <summary>
            The name of the wallet containing funds to use to cover transaction fees, gas, and any funds specified in the
            Amount field.
            </summary>
        </member>
        <member name="P:Xels.Bitcoin.Features.SmartContracts.Models.BuildCallContractTransactionRequest.AccountName">
            <summary>
            The name of the wallet account containing funds to use to cover transaction fees, gas, and any funds specified in the
            Amount field. Defaults to "account 0".
            </summary>
        </member>
        <member name="P:Xels.Bitcoin.Features.SmartContracts.Models.BuildCallContractTransactionRequest.Outpoints">
            <summary>
            A list of outpoints to use as inputs for the transaction.
            </summary> 
        </member>
        <member name="P:Xels.Bitcoin.Features.SmartContracts.Models.BuildCallContractTransactionRequest.ContractAddress">
            <summary>
            The address of the smart contract containing the method.
            </summary>
        </member>
        <member name="P:Xels.Bitcoin.Features.SmartContracts.Models.BuildCallContractTransactionRequest.MethodName">
            <summary>
            The name of the method to call.
            </summary>
        </member>
        <member name="P:Xels.Bitcoin.Features.SmartContracts.Models.BuildCallContractTransactionRequest.Amount">
            <summary>
            The amount of STRAT (or sidechain coin) to send to the smart contract address.
            </summary>
        </member>
        <member name="P:Xels.Bitcoin.Features.SmartContracts.Models.BuildCallContractTransactionRequest.FeeAmount">
            <summary>
            The fees in STRAT (or sidechain coin) to cover the method call transaction.
            </summary>
        </member>
        <member name="P:Xels.Bitcoin.Features.SmartContracts.Models.BuildCallContractTransactionRequest.Password">
            <summary>
            The password for the wallet.
            </summary>
        </member>
        <member name="P:Xels.Bitcoin.Features.SmartContracts.Models.BuildCallContractTransactionRequest.GasPrice">
            <summary>
            The gas price to charge when the method is run by the miner mining the call transaction. 
            </summary>
        </member>
        <member name="P:Xels.Bitcoin.Features.SmartContracts.Models.BuildCallContractTransactionRequest.GasLimit">
            <summary>
            The maximum amount of gas that can be spent executing this transaction.
            This limit cannot be exceeded when the method is 
            run by the miner mining the call transaction. If the gas spent exceeds this value, 
            execution of the smart contract stops.
            </summary>
        </member>
        <member name="P:Xels.Bitcoin.Features.SmartContracts.Models.BuildCallContractTransactionRequest.Sender">
            <summary>
            A wallet address containing the funds to cover transaction fees, gas, and any funds specified in the
            Amount field. Some methods, such as a withdrawal method on an escrow smart contract,
            should only be executed by the deployer. In this case, it is this address that identifies
            the deployer.
            It is recommended that you use /api/SmartContractWallet/account-addresses to retrieve
            an address to use for smart contracts. This enables you to obtain a smart contract transaction history.
            However, any sender address containing the required funds will work.
            </summary>
        </member>
        <member name="P:Xels.Bitcoin.Features.SmartContracts.Models.BuildCallContractTransactionRequest.Parameters">
            <summary>
            An array of encoded strings containing the parameters (and their type) to pass to the smart contract
            method when it is called. More information on the
            format of a parameter string is available
            <a target="_blank" href="https://academy.xelsplatform.com/SmartContracts/working-with-contracts.html#parameter-serialization">here</a>.
            </summary>
        </member>
        <member name="M:Xels.Bitcoin.Features.SmartContracts.Models.BuildCallContractTransactionResponse.Failed(System.String)">
            <summary>
            A response that gets constructed when building the call contract transaction failed.
            </summary>
            <param name="message">The error message indicating what went wrong.</param>
        </member>
        <member name="M:Xels.Bitcoin.Features.SmartContracts.Models.BuildCallContractTransactionResponse.Succeeded(System.String,NBitcoin.Transaction,NBitcoin.Money)">
            <summary>
            Constructs a response if the call contract transaction was successfully built.
            </summary>
            <param name="methodName">The method name that will be called on the contract.</param>
            <param name="transaction">The created call contract transaction.</param>
            <param name="transactionFee">The fee associated with the transaction.</param>
        </member>
        <member name="M:Xels.Bitcoin.Features.SmartContracts.Models.BuildCreateContractTransactionResponse.Failed(System.String)">
            <summary>
            A response that gets constructed when building the create contract transaction failed.
            </summary>
            <param name="message">The error message indicating what went wrong.</param>
        </member>
        <member name="M:Xels.Bitcoin.Features.SmartContracts.Models.BuildCreateContractTransactionResponse.Succeeded(NBitcoin.Transaction,NBitcoin.Money,System.String)">
            <summary>
            Constructs a response if the create contract transaction was successfully built.
            </summary>
            <param name="transaction">The created create contract transaction.</param>
            <param name="transactionFee">The fee associated with the transaction.</param>
            <param name="address">The address associated to the new contract.</param>
        </member>
        <member name="T:Xels.Bitcoin.Features.SmartContracts.Models.BuildCreateContractTransactionRequest">
            <summary>
            A class containing the necessary parameters to perform a smart contract creation request.
            </summary>
        </member>
        <member name="P:Xels.Bitcoin.Features.SmartContracts.Models.BuildCreateContractTransactionRequest.WalletName">
            <summary>
            The name of the wallet containing funds to use to cover transaction fees, gas, and any funds specified in the
            Amount field.
            </summary>
        </member>
        <member name="P:Xels.Bitcoin.Features.SmartContracts.Models.BuildCreateContractTransactionRequest.AccountName">
            <summary>
            The name of the wallet account containing funds to use to cover transaction fees, gas, and any funds specified in the
            Amount field. Defaults to "account 0".
            </summary>
        </member>
        <member name="P:Xels.Bitcoin.Features.SmartContracts.Models.BuildCreateContractTransactionRequest.Outpoints">
            <summary>
            A list of outpoints to use as inputs for the transaction.
            </summary> 
        </member>
        <member name="P:Xels.Bitcoin.Features.SmartContracts.Models.BuildCreateContractTransactionRequest.Amount">
            <summary>
            The amount of STRAT (or the sidechain coin) to send to the smart contract address on creation.
            </summary>
        </member>
        <member name="P:Xels.Bitcoin.Features.SmartContracts.Models.BuildCreateContractTransactionRequest.FeeAmount">
            <summary>
            The fees in STRAT (or the sidechain coin) to cover the smart contract creation transaction.
            </summary>
        </member>
        <member name="P:Xels.Bitcoin.Features.SmartContracts.Models.BuildCreateContractTransactionRequest.Password">
            <summary>
            The password for the wallet.
            </summary>
        </member>
        <member name="P:Xels.Bitcoin.Features.SmartContracts.Models.BuildCreateContractTransactionRequest.ContractCode">
            <summary>
            The smart contract bytecode.
            </summary>
        </member>
        <member name="P:Xels.Bitcoin.Features.SmartContracts.Models.BuildCreateContractTransactionRequest.GasPrice">
            <summary>
            The gas price to charge when the smart contract constructor is run by the miner mining the creation transaction. 
            </summary>
        </member>
        <member name="P:Xels.Bitcoin.Features.SmartContracts.Models.BuildCreateContractTransactionRequest.GasLimit">
            <summary>
            The maximum amount of gas that can be spent executing this transaction.
            This limit cannot be exceeded when the method is 
            run by the miner mining the creation transaction. If the gas spent exceeds this value, 
            execution of the smart contract stops.
            </summary>
        </member>
        <member name="P:Xels.Bitcoin.Features.SmartContracts.Models.BuildCreateContractTransactionRequest.Sender">
            <summary>
            A wallet address containing the funds to cover transaction fees, gas, and any funds specified in the
            Amount field. Some methods, such as a withdrawal method on an escrow smart contract,
            should only be executed by the deployer. In this case, it is this address that identifies
            the deployer.
            It is recommended that you use /api/SmartContractWallet/account-addresses to retrieve
            an address to use for smart contracts. This enables you to obtain a smart contract transaction history.
            However, any sender address containing the required funds will work.
            </summary>
        </member>
        <member name="P:Xels.Bitcoin.Features.SmartContracts.Models.BuildCreateContractTransactionRequest.Parameters">
            <summary>
            An array of encoded strings containing the parameters (and their type) to pass to the smart contract
            constructor when it is called. More information on the
            format of a parameter string is available
            <a target="_blank" href="https://academy.xelsplatform.com/SmartContracts/working-with-contracts.html#parameter-serialization">here</a>.
            </summary>
        </member>
        <member name="P:Xels.Bitcoin.Features.SmartContracts.Models.GetHistoryRequest.Skip">
            <summary>
            An optional value allowing (with Take) pagination of the wallet's history. If given,
            the member specifies the numbers of records in the wallet's history to skip before
            beginning record retrieval; otherwise the wallet history records are retrieved starting from 0.
            </summary>      
        </member>
        <member name="P:Xels.Bitcoin.Features.SmartContracts.Models.GetHistoryRequest.Take">
            <summary>
            An optional value allowing (with Skip) pagination of the wallet's history. If given,
            the member specifies the number of records in the wallet's history to retrieve in this call; otherwise all
            wallet history records are retrieved.
            </summary>  
        </member>
        <member name="T:Xels.Bitcoin.Features.SmartContracts.Models.GetStorageRequest">
            <summary>
            A class containing the necessary parameters to perform a retrieve stored data request.
            </summary>
        </member>
        <member name="P:Xels.Bitcoin.Features.SmartContracts.Models.GetStorageRequest.ContractAddress">
            <summary>
            The address of the smart contract.
            </summary>
        </member>
        <member name="P:Xels.Bitcoin.Features.SmartContracts.Models.GetStorageRequest.StorageKey">
            <summary>
            The key for the piece of stored data to retrieve.
            </summary>
        </member>
        <member name="P:Xels.Bitcoin.Features.SmartContracts.Models.GetStorageRequest.DataType">
            <summary>
            The stored data type.
            </summary>
        </member>
        <member name="T:Xels.Bitcoin.Features.SmartContracts.Models.LocalCallContractRequest">
            <summary>
            A class containing the necessary parameters to perform a local smart contract method call request.
            </summary>
        </member>
        <member name="P:Xels.Bitcoin.Features.SmartContracts.Models.LocalCallContractRequest.ContractAddress">
            <summary>
            The address of the smart contract containing the method.
            </summary>
        </member>
        <member name="P:Xels.Bitcoin.Features.SmartContracts.Models.LocalCallContractRequest.MethodName">
            <summary>
            The name of the method to call.
            </summary>
        </member>
        <member name="P:Xels.Bitcoin.Features.SmartContracts.Models.LocalCallContractRequest.Amount">
            <summary>
            The amount of STRAT (or sidechain coin) to send to the smart contract address. 
            No funds are actually sent, but the Amount field allows
            certain scenarios, where the funds sent dictates the result, to be checked.
            </summary>
        </member>
        <member name="P:Xels.Bitcoin.Features.SmartContracts.Models.LocalCallContractRequest.GasPrice">
            <summary>
            The gas price to use. This is used to calculate the expected expenditure
            if the method is run by a miner mining a call transaction rather than
            locally.  
            </summary>
        </member>
        <member name="P:Xels.Bitcoin.Features.SmartContracts.Models.LocalCallContractRequest.GasLimit">
            <summary>
            The maximum amount of gas that can be spent executing this transaction.
            Although the gas expenditure is theoretical rather than actual,
            this limit cannot be exceeded even when the method is run locally.
            </summary>
        </member>
        <member name="P:Xels.Bitcoin.Features.SmartContracts.Models.LocalCallContractRequest.Sender">
            <summary>
            A wallet address containing the funds to cover transaction fees, gas, and any funds specified in the
            Amount field.
            Note that because the method call is local no funds are spent. However, the concept of the sender address
            is still valid and may need to be checked.
            For example, some methods, such as a withdrawal method on an escrow smart contract, should only be executed
            by the deployer, and in this case, it is the Sender address that identifies the deployer.
            </summary>
        </member>
        <member name="P:Xels.Bitcoin.Features.SmartContracts.Models.LocalCallContractRequest.Parameters">
            <summary>
            An array of encoded strings containing the parameters (and their type) to pass to the smart contract
            method when it is called. More information on the
            format of a parameter string is available
            <a target="_blank" href="https://academy.xelsplatform.com/SmartContracts/working-with-contracts.html#parameter-serialization">here</a>.
            </summary> 
        </member>
        <member name="M:Xels.Bitcoin.Features.SmartContracts.PoS.IFullNodeBuilderExtensions.UseSmartContractPosConsensus(Xels.Bitcoin.Builder.IFullNodeBuilder)">
            <summary>
            Configures the node with the smart contract proof of stake consensus model.
            </summary>
        </member>
        <member name="M:Xels.Bitcoin.Features.SmartContracts.PoS.IFullNodeBuilderExtensions.UseSmartContractPosPowMining(Xels.Bitcoin.Builder.IFullNodeBuilder)">
            <summary>
            Adds mining to the smart contract node.
            <para>We inject <see cref="T:Xels.Bitcoin.Features.Miner.Interfaces.IPowMining"/> with a smart contract block provider and definition.</para>
            </summary>
        </member>
        <member name="T:Xels.Bitcoin.Features.SmartContracts.PoS.Rules.SmartContractPosBlockSignatureRule">
            <summary>
            A rule that will validate the signature of a PoS block.
            </summary>
        </member>
        <member name="M:Xels.Bitcoin.Features.SmartContracts.PoS.Rules.SmartContractPosBlockSignatureRule.Run(Xels.Bitcoin.Consensus.Rules.RuleContext)">
            <inheritdoc />
            <exception cref="P:Xels.Bitcoin.Consensus.ConsensusErrors.BadBlockSignature">The block signature is invalid.</exception>
        </member>
        <member name="M:Xels.Bitcoin.Features.SmartContracts.PoS.Rules.SmartContractPosBlockSignatureRule.CheckBlockSignature(Xels.Bitcoin.Features.SmartContracts.PoS.SmartContractPosBlock)">
            <summary>
            Checks if block signature is valid.
            TODO: Update this code to reflect changes made to the corresponding method in <see cref="T:Xels.Bitcoin.Features.Consensus.Rules.CommonRules.PosBlockSignatureRule"/>.
            </summary>
            <param name="block">The block.</param>
            <returns><c>true</c> if the signature is valid, <c>false</c> otherwise.</returns>
        </member>
        <member name="T:Xels.Bitcoin.Features.SmartContracts.PoS.Rules.SmartContractPosCoinviewRule">
            <summary>
            Proof of stake override for the coinview rules - BIP68, MaxSigOps and BlockReward checks.
            </summary>
        </member>
        <member name="M:Xels.Bitcoin.Features.SmartContracts.PoS.Rules.SmartContractPosCoinviewRule.RunAsync(Xels.Bitcoin.Consensus.Rules.RuleContext)">
            <inheritdoc />
            <summary>Compute and store the stake proofs.</summary>
        </member>
        <member name="M:Xels.Bitcoin.Features.SmartContracts.PoS.Rules.SmartContractPosCoinviewRule.CheckBlockReward(Xels.Bitcoin.Consensus.Rules.RuleContext,NBitcoin.Money,System.Int32,NBitcoin.Block)">
            <inheritdoc />
        </member>
        <member name="M:Xels.Bitcoin.Features.SmartContracts.PoS.Rules.SmartContractPosCoinviewRule.GetTransactionFee(Xels.Bitcoin.Features.Consensus.UnspentOutputSet,NBitcoin.Transaction)">
            <inheritdoc />
        </member>
        <member name="M:Xels.Bitcoin.Features.SmartContracts.PoS.Rules.SmartContractPosCoinviewRule.UpdateCoinView(Xels.Bitcoin.Consensus.Rules.RuleContext,NBitcoin.Transaction)">
            <inheritdoc />
        </member>
        <member name="M:Xels.Bitcoin.Features.SmartContracts.PoS.Rules.SmartContractPosCoinviewRule.CheckMaturity(Xels.Bitcoin.Utilities.UnspentOutputs,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:Xels.Bitcoin.Features.SmartContracts.PoS.Rules.SmartContractPosCoinviewRule.CheckAndComputeStake(Xels.Bitcoin.Consensus.Rules.RuleContext)">
            <summary>
            Checks and computes stake.
            </summary>
            <param name="context">Context that contains variety of information regarding blocks validation and execution.</param>
            <exception cref="P:Xels.Bitcoin.Consensus.ConsensusErrors.PrevStakeNull">Thrown if previous stake is not found.</exception>
            <exception cref="P:Xels.Bitcoin.Consensus.ConsensusErrors.SetStakeEntropyBitFailed">Thrown if failed to set stake entropy bit.</exception>
        </member>
        <member name="M:Xels.Bitcoin.Features.SmartContracts.PoS.Rules.SmartContractPosCoinviewRule.GetProofOfWorkReward(System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:Xels.Bitcoin.Features.SmartContracts.PoS.Rules.SmartContractPosCoinviewRule.GetProofOfStakeReward(System.Int32)">
            <summary>
            Gets miner's coin stake reward.
            </summary>
            <param name="height">Target block height.</param>
            <returns>Miner's coin stake reward.</returns>
        </member>
        <member name="F:Xels.Bitcoin.Features.SmartContracts.PoS.SmartContractBlockProvider.powBlockDefinition">
            <summary>Defines how proof of work blocks are built.</summary>
        </member>
        <member name="F:Xels.Bitcoin.Features.SmartContracts.PoS.SmartContractBlockProvider.posPowBlockDefinition">
            <summary>Defines how proof of work blocks are built on a proof-of-stake network.</summary>
        </member>
        <member name="M:Xels.Bitcoin.Features.SmartContracts.PoS.SmartContractBlockProvider.BuildPosBlock(NBitcoin.ChainedHeader,NBitcoin.Script)">
            <inheritdoc/>
        </member>
        <member name="M:Xels.Bitcoin.Features.SmartContracts.PoS.SmartContractBlockProvider.BuildPowBlock(NBitcoin.ChainedHeader,NBitcoin.Script)">
            <inheritdoc/>
        </member>
        <member name="T:Xels.Bitcoin.Features.SmartContracts.PoS.SmartContractPosBlock">
            <summary>
            A smart contract proof of stake block that contains the additional block signature serialization.
            </summary>
        </member>
        <member name="P:Xels.Bitcoin.Features.SmartContracts.PoS.SmartContractPosBlockHeader.CurrentVersion">
            <inheritdoc />
        </member>
        <member name="M:Xels.Bitcoin.Features.SmartContracts.PoS.SmartContractPosBlockHeader.GetHash">
            <inheritdoc />
        </member>
        <member name="M:Xels.Bitcoin.Features.SmartContracts.PoS.SmartContractPosBlockHeader.GetPoWHash">
            /// <inheritdoc />
        </member>
        <member name="M:Xels.Bitcoin.Features.SmartContracts.PoS.SmartContractPosConsensusFactory.CreateBlockHeader">
            <inheritdoc />
        </member>
        <member name="M:Xels.Bitcoin.Features.SmartContracts.PoS.SmartContractPosConsensusFactory.CreateBlock">
            <inheritdoc />
        </member>
        <member name="M:Xels.Bitcoin.Features.SmartContracts.PoS.SmartContractPosConsensusFactory.CreateTransaction">
            <inheritdoc />
        </member>
        <member name="M:Xels.Bitcoin.Features.SmartContracts.PoS.SmartContractPosConsensusFactory.CreateTransaction(System.Byte[])">
            <inheritdoc />
        </member>
        <member name="M:Xels.Bitcoin.Features.SmartContracts.PoS.SmartContractPosConsensusFactory.CreateTransaction(System.String)">
            <inheritdoc />
        </member>
        <member name="M:Xels.Bitcoin.Features.SmartContracts.PoS.SmartContractPosConsensusFactory.TryCreateNew``1">
            <inheritdoc />
        </member>
        <member name="T:Xels.Bitcoin.Features.SmartContracts.PoS.SmartContractPosPowBlockDefinition">
            <summary>
            Defines how a proof of work block will be built on a proof of stake network.
            </summary>
        </member>
        <member name="F:Xels.Bitcoin.Features.SmartContracts.PoS.SmartContractPosPowBlockDefinition.logger">
            <summary>Instance logger.</summary>
        </member>
        <member name="F:Xels.Bitcoin.Features.SmartContracts.PoS.SmartContractPosPowBlockDefinition.stakeChain">
            <summary>Database of stake related data for the current blockchain.</summary>
        </member>
        <member name="F:Xels.Bitcoin.Features.SmartContracts.PoS.SmartContractPosPowBlockDefinition.stakeValidator">
            <summary>Provides functionality for checking validity of PoS blocks.</summary>
        </member>
        <member name="M:Xels.Bitcoin.Features.SmartContracts.PoS.SmartContractPosPowBlockDefinition.AddToBlock(Xels.Bitcoin.Features.MemoryPool.TxMempoolEntry)">
            <inheritdoc/>
        </member>
        <member name="M:Xels.Bitcoin.Features.SmartContracts.PoS.SmartContractPosPowBlockDefinition.Build(NBitcoin.ChainedHeader,NBitcoin.Script)">
            <inheritdoc/>
        </member>
        <member name="M:Xels.Bitcoin.Features.SmartContracts.PoS.SmartContractPosPowBlockDefinition.UpdateHeaders">
            <inheritdoc/>
        </member>
        <member name="M:Xels.Bitcoin.Features.SmartContracts.PoS.SmartContractPosPowBlockDefinition.UpdateReceiptRoot(Xels.SmartContracts.Core.Interfaces.ISmartContractBlockHeader)">
            <summary>
            Sets the receipt root based on all the receipts generated in smart contract execution inside this block.
            </summary>
        </member>
        <member name="M:Xels.Bitcoin.Features.SmartContracts.PoS.SmartContractPosPowBlockDefinition.UpdateLogsBloom(Xels.SmartContracts.Core.Interfaces.ISmartContractBlockHeader)">
            <summary>
            Sets the bloom filter for all logs that occurred in this block's execution.
            </summary>
        </member>
        <member name="M:Xels.Bitcoin.Features.SmartContracts.PoS.SmartContractPosPowBlockDefinition.ExecuteSmartContract(Xels.Bitcoin.Features.MemoryPool.TxMempoolEntry)">
            <summary>
            Execute the contract and add all relevant fees and refunds to the block.
            </summary>
            <remarks>TODO: At some point we need to change height to a ulong.</remarks> 
        </member>
        <member name="T:Xels.Bitcoin.Features.SmartContracts.PoS.SmartContractPosTransaction">
            <summary>A smart contract proof of stake transaction.</summary>
        </member>
        <member name="M:Xels.Bitcoin.Features.SmartContracts.PoW.IFullNodeBuilderExtensions.UseSmartContractPowConsensus(Xels.Bitcoin.Builder.IFullNodeBuilder)">
            <summary>
            Configures the node with the smart contract proof of work consensus model.
            </summary>
        </member>
        <member name="M:Xels.Bitcoin.Features.SmartContracts.PoW.IFullNodeBuilderExtensions.UseSmartContractPowMining(Xels.Bitcoin.Builder.IFullNodeBuilder)">
            <summary>
            Adds mining to the smart contract node.
            <para>We inject <see cref="T:Xels.Bitcoin.Features.Miner.Interfaces.IPowMining"/> with a smart contract block provider and definition.</para>
            </summary>
        </member>
        <member name="M:Xels.Bitcoin.Features.SmartContracts.PoW.Rules.SmartContractPowCoinviewRule.GetTransactionFee(Xels.Bitcoin.Features.Consensus.UnspentOutputSet,NBitcoin.Transaction)">
            <inheritdoc />
        </member>
        <member name="F:Xels.Bitcoin.Features.SmartContracts.PoW.SmartContractBlockDefinition.GasPerBlockLimit">
            <summary>The maximum amount of gas that can be spent in this block.</summary>
        </member>
        <member name="M:Xels.Bitcoin.Features.SmartContracts.PoW.SmartContractBlockDefinition.AddToBlock(Xels.Bitcoin.Features.MemoryPool.TxMempoolEntry)">
            <summary>
            Overrides the <see cref="M:Xels.Bitcoin.Features.SmartContracts.PoW.SmartContractBlockDefinition.AddToBlock(Xels.Bitcoin.Features.MemoryPool.TxMempoolEntry)"/> behaviour of <see cref="T:Xels.Bitcoin.Features.Miner.BlockDefinition"/>.
            <para>
            Determine whether or not the mempool entry contains smart contract execution
            code. If not, then add to the block as per normal. Else extract and deserialize
            the smart contract code from the TxOut's ScriptPubKey.
            </para>
            </summary>
            <param name="mempoolEntry">The mempool entry containing the transactions to include.</param>
        </member>
        <member name="M:Xels.Bitcoin.Features.SmartContracts.PoW.SmartContractBlockDefinition.Build(NBitcoin.ChainedHeader,NBitcoin.Script)">
            <inheritdoc/>
        </member>
        <member name="M:Xels.Bitcoin.Features.SmartContracts.PoW.SmartContractBlockDefinition.UpdateHeaders">
            <summary>
            The block header for smart contract blocks is identical to the standard block,
            except it also has a second 32-byte root, the state root. This byte array
            represents the current state of contract code, storage and balances, and can
            be used in conjunction with getSnapshotTo at any time to recreate this state.
            </summary>
        </member>
        <member name="M:Xels.Bitcoin.Features.SmartContracts.PoW.SmartContractBlockDefinition.UpdateReceiptRoot(Xels.SmartContracts.Core.Interfaces.ISmartContractBlockHeader)">
            <summary>
            Sets the receipt root based on all the receipts generated in smart contract execution inside this block.
            </summary>
            <param name="scHeader">The smart contract header that will be updated.</param>
        </member>
        <member name="M:Xels.Bitcoin.Features.SmartContracts.PoW.SmartContractBlockDefinition.UpdateLogsBloom(Xels.SmartContracts.Core.Interfaces.ISmartContractBlockHeader)">
            <summary>
            Sets the bloom filter for all logs that occurred in this block's execution.
            </summary>
            <param name="scHeader">The smart contract header that will be updated.</param>
        </member>
        <member name="M:Xels.Bitcoin.Features.SmartContracts.PoW.SmartContractBlockDefinition.ExecuteSmartContract(Xels.Bitcoin.Features.MemoryPool.TxMempoolEntry)">
            <summary>
            Execute the contract and add all relevant fees and refunds to the block.
            </summary>
            <remarks>TODO: At some point we need to change height to a ulong.</remarks>
            <param name="mempoolEntry">The mempool entry containing the smart contract transaction.</param>
        </member>
        <member name="M:Xels.Bitcoin.Features.SmartContracts.PoW.SmartContractPowConsensusFactory.CreateBlockHeader">
            <inheritdoc />
        </member>
        <member name="M:Xels.Bitcoin.Features.SmartContracts.PoW.SmartContractPowConsensusFactory.TryCreateNew``1">
            <inheritdoc />
        </member>
        <member name="T:Xels.Bitcoin.Features.SmartContracts.ReflectionExecutor.Consensus.Rules.SmartContractFormatLogic">
            <summary>
            Validates that a smart contract transaction can be deserialized correctly, and that it conforms to gas
            price and gas limit rules.
            </summary>
        </member>
        <member name="F:Xels.Bitcoin.Features.SmartContracts.ReflectionExecutor.Controllers.SmartContractsController.MinConfirmationsAllChecks">
            <summary>
            For consistency in retrieval of balances, and to ensure that smart contract transaction
            creation always works, as the retrieved transactions have always already been included in a block.
            </summary>
        </member>
        <member name="M:Xels.Bitcoin.Features.SmartContracts.ReflectionExecutor.Controllers.SmartContractsController.GetCode(System.String)">
             <summary>
             Gets the bytecode for a smart contract as a hexadecimal string. The bytecode is decompiled to
             C# source, which is returned as well. Be aware, it is the bytecode which is being executed,
             so this is the "source of truth".
             </summary>
            
             <param name="address">The address of the smart contract to retrieve as bytecode and C# source.</param>
            
             <returns>A response object containing the bytecode and the decompiled C# code.</returns>
        </member>
        <member name="M:Xels.Bitcoin.Features.SmartContracts.ReflectionExecutor.Controllers.SmartContractsController.GetBalance(System.String)">
            <summary>
            Gets the balance of a smart contract in STRAT (or the sidechain coin). This method only works for smart contract addresses. 
            </summary>
            
            <param name="address">The address of the smart contract to retrieve the balance for.</param>
            
            <returns>The balance of a smart contract in STRAT (or the sidechain coin).</returns>
        </member>
        <member name="M:Xels.Bitcoin.Features.SmartContracts.ReflectionExecutor.Controllers.SmartContractsController.GetStorage(Xels.Bitcoin.Features.SmartContracts.Models.GetStorageRequest)">
             <summary>
             Gets a single piece of smart contract data, which was stored as a key–value pair using the
             SmartContract.PersistentState property. 
             The method performs a lookup in the smart contract
             state database for the supplied smart contract address and key.
             The value associated with the given key, deserialized for the specified data type, is returned.
             If the key does not exist or deserialization fails, the method returns the default value for
             the specified type.
             </summary>
             
             <param name="request">An object containing the necessary parameters to perform a retrieve stored data request.</param>
            
             <returns>A single piece of stored smart contract data.</returns>
        </member>
        <member name="M:Xels.Bitcoin.Features.SmartContracts.ReflectionExecutor.Controllers.SmartContractsController.GetReceipt(System.String)">
            <summary>
            Test
            </summary>
            <returns></returns>
        </member>
        <member name="M:Xels.Bitcoin.Features.SmartContracts.ReflectionExecutor.Controllers.SmartContractsController.GetReceiptAPI(System.String)">
            <summary>
            Gets a smart contract transaction receipt. Receipts contain information about how a smart contract transaction was executed.
            This includes the value returned from a smart contract call and how much gas was used.  
            </summary>
            
            <param name="txHash">A hash of the smart contract transaction (the transaction ID).</param>
            
            <returns>The receipt for the smart contract.</returns> 
        </member>
        <member name="M:Xels.Bitcoin.Features.SmartContracts.ReflectionExecutor.Controllers.SmartContractsController.ReceiptSearch(System.String,System.String,System.Collections.Generic.List{System.String},System.Int32,System.Nullable{System.Int32})">
            <summary>
            Searches for receipts that match the given filter criteria. Filter criteria are ANDed together.
            </summary>
            <param name="contractAddress">The contract address from which events were raised.</param>
            <param name="eventName">The name of the event raised.</param>
            <param name="topics">The topics to search. All specified topics must be present.</param>
            <param name="fromBlock">The block number from which to start searching.</param>
            <param name="toBlock">The block number where searching finishes.</param>
            <returns>A list of all matching receipts.</returns>
        </member>
        <member name="M:Xels.Bitcoin.Features.SmartContracts.ReflectionExecutor.Controllers.SmartContractsController.ReceiptSearchAPI(System.String,System.String,System.Collections.Generic.List{System.String},System.Int32,System.Nullable{System.Int32})">
            <summary>
            Searches a smart contract's receipts for those which match a specific event. The SmartContract.Log() function
            is capable of storing C# structs, and structs are used to store information about different events occurring 
            on the smart contract. For example, a "TransferLog" struct could contain "From" and "To" fields and be used to log
            when a smart contract makes a transfer of funds from one wallet to another. The log entries are held inside the smart contract,
            indexed using the name of the struct, and are linked to individual transaction receipts.
            Therefore, it is possible to return a smart contract's transaction receipts
            which match a specific event (as defined by the struct name).  
            </summary>
            
            <param name="contractAddress">The contract address from which events were raised.</param>
            <param name="eventName">The name of the event raised.</param>
            <param name="topics">The topics to search. All specified topics must be present.</param>
            <param name="fromBlock">The block number from which to start searching.</param>
            <param name="toBlock">The block number where searching finishes.</param>
            
            <returns>A list of receipts for transactions relating to a specific smart contract and a specific event in that smart contract.</returns>
        </member>
        <member name="M:Xels.Bitcoin.Features.SmartContracts.ReflectionExecutor.Controllers.SmartContractsController.BuildCreateSmartContractTransaction(Xels.Bitcoin.Features.SmartContracts.Models.BuildCreateContractTransactionRequest)">
            <summary>
            Builds a transaction to create a smart contract. Although the transaction is created, the smart contract is not
            deployed on the network, and no gas or fees are consumed.
            Instead the created transaction is returned as a hexadecimal string within a JSON object.
            Transactions built using this method can be deployed using /api/SmartContractWallet/send-transaction.
            However, unless there is a need to closely examine the transaction before deploying it, you should use
            api/SmartContracts/build-and-send-create.
            </summary>
            
            <param name="request">An object containing the necessary parameters to build the transaction.</param>
            
            <returns>A transaction ready to create a smart contract.</returns>
        </member>
        <member name="M:Xels.Bitcoin.Features.SmartContracts.ReflectionExecutor.Controllers.SmartContractsController.BuildCallSmartContractTransaction(Xels.Bitcoin.Features.SmartContracts.Models.BuildCallContractTransactionRequest)">
            <summary>
            Builds a transaction to call a smart contract method. Although the transaction is created, the
            call is not made, and no gas or fees are consumed.
            Instead the created transaction is returned as a JSON object.
            Transactions built using this method can be deployed using /api/SmartContractWallet/send-transaction
            However, unless there is a need to closely examine the transaction before deploying it, you should use
            api/SmartContracts/build-and-send-call.
            </summary>
            
            <param name="request">An object containing the necessary parameters to build the transaction.</param>
            
            <returns>A transaction ready to call a method on a smart contract.</returns>
        </member>
        <member name="M:Xels.Bitcoin.Features.SmartContracts.ReflectionExecutor.Controllers.SmartContractsController.BuildTransaction(Xels.Bitcoin.Features.SmartContracts.Models.BuildContractTransactionRequest)">
            <summary>
            Builds a transaction to transfer funds on a smart contract network.
            </summary>
            
            <param name="request">An object containing the necessary parameters to build the transaction.</param>
            
            <returns>The build transaction hex.</returns>
        </member>
        <member name="M:Xels.Bitcoin.Features.SmartContracts.ReflectionExecutor.Controllers.SmartContractsController.EstimateFee(Xels.Bitcoin.Features.SmartContracts.Models.ScTxFeeEstimateRequest)">
            <summary>
            Gets a fee estimate for a specific smart contract account-based transfer transaction.
            This differs from fee estimation on standard networks due to the way inputs must be selected for account-based transfers.
            </summary>
            <param name="request">An object containing the parameters used to build the the fee estimation transaction.</param>
            <returns>The estimated fee for the transaction.</returns>
        </member>
        <member name="M:Xels.Bitcoin.Features.SmartContracts.ReflectionExecutor.Controllers.SmartContractsController.BuildAndSendCreateSmartContractTransactionAsync(Xels.Bitcoin.Features.SmartContracts.Models.BuildCreateContractTransactionRequest)">
            <summary>
            Builds a transaction to create a smart contract and then broadcasts the transaction to the network.
            If the deployment is successful, methods on the smart contract can be subsequently called.
            </summary>
            
            <param name="request">An object containing the necessary parameters to build the transaction.</param>
            
            <returns>The transaction used to create the smart contract. The result of the transaction broadcast is not returned
            and you should check for a transaction receipt to see if it was successful.</returns>
        </member>
        <member name="M:Xels.Bitcoin.Features.SmartContracts.ReflectionExecutor.Controllers.SmartContractsController.BuildAndSendCallSmartContractTransactionAsync(Xels.Bitcoin.Features.SmartContracts.Models.BuildCallContractTransactionRequest)">
             <summary>
             Builds a transaction to call a smart contract method and then broadcasts the transaction to the network.
             If the call is successful, any changes to the smart contract balance or persistent data are propagated
             across the network.
             </summary>
             
             <param name="request">An object containing the necessary parameters to build the transaction.</param>
            
             <returns>The transaction used to call a smart contract method. The result of the transaction broadcast is not returned
             and you should check for a transaction receipt to see if it was successful.</returns>
        </member>
        <member name="M:Xels.Bitcoin.Features.SmartContracts.ReflectionExecutor.Controllers.SmartContractsController.LocalCallSmartContractTransaction(Xels.Bitcoin.Features.SmartContracts.Models.LocalCallContractRequest)">
            <summary>
            Makes a local call to a method on a smart contract that has been successfully deployed. A transaction 
            is not created as the call is never propagated across the network. All persistent data held by the   
            smart contract is copied before the call is made. Only this copy is altered by the call
            and the actual data is unaffected. Even if an amount of funds are specified to send with the call,
            no funds are in fact sent.
            The purpose of this function is to query and test methods. 
            </summary>
            
            <param name="request">An object containing the necessary parameters to build the transaction.</param>
            
            <results>The result of the local call to the smart contract method.</results>
        </member>
        <member name="M:Xels.Bitcoin.Features.SmartContracts.ReflectionExecutor.Controllers.SmartContractsController.RewritePropertyGetterName(Xels.Bitcoin.Features.SmartContracts.Models.LocalCallContractRequest)">
            <summary>
            If the call is to a property, rewrites the method name to the getter method's name.
            </summary>
        </member>
        <member name="M:Xels.Bitcoin.Features.SmartContracts.ReflectionExecutor.Controllers.SmartContractsController.GetAddressesWithBalances(System.String)">
             <summary>
             Gets all addresses owned by a wallet which have a balance associated with them. This
             method effectively returns the balance of all the UTXOs associated with a wallet.
             In a case where multiple UTXOs are associated with one address, the amounts
             are tallied to give a total for that address.
             </summary>
            
             <param name="walletName">The name of the wallet to retrieve the addresses from.</param>
             
             <returns>The addresses owned by a wallet which have a balance associated with them.</returns>
        </member>
        <member name="F:Xels.Bitcoin.Features.SmartContracts.SmartContractBlockHeader.hashStateRoot">
            <summary>
            Root of the state trie after execution of this block. 
            </summary>
        </member>
        <member name="F:Xels.Bitcoin.Features.SmartContracts.SmartContractBlockHeader.receiptRoot">
            <summary>
            Root of the receipt trie after execution of this block.
            </summary>
        </member>
        <member name="F:Xels.Bitcoin.Features.SmartContracts.SmartContractBlockHeader.logsBloom">
            <summary>
            Bitwise-OR of all the blooms generated from all of the smart contract transactions in the block.
            </summary>
        </member>
        <member name="M:Xels.Bitcoin.Features.SmartContracts.SmartContractBlockHeader.ReadWrite(NBitcoin.BitcoinStream)">
            <summary>
            <see cref="M:Xels.Bitcoin.Features.SmartContracts.SmartContractBlockHeader.ReadWrite(NBitcoin.BitcoinStream)"/> overridden so that we can write the <see cref="F:Xels.Bitcoin.Features.SmartContracts.SmartContractBlockHeader.hashStateRoot"/>.
            </summary>
        </member>
        <member name="M:Xels.Bitcoin.Features.SmartContracts.SmartContractBlockHeader.ReadWriteHashingStream(NBitcoin.BitcoinStream)">
            <summary>
            Overridden so we can add these fields to the hash.
            </summary>
        </member>
        <member name="M:Xels.Bitcoin.Features.SmartContracts.IFullNodeBuilderExtensions.AddSmartContracts(Xels.Bitcoin.Builder.IFullNodeBuilder,System.Action{Xels.Bitcoin.Features.SmartContracts.SmartContractOptions},System.Action{Xels.Bitcoin.Features.SmartContracts.SmartContractOptions})">
            <summary>
            Adds the smart contract feature to the node.
            </summary>
        </member>
        <member name="M:Xels.Bitcoin.Features.SmartContracts.IFullNodeBuilderExtensions.UseReflectionExecutor(Xels.Bitcoin.Features.SmartContracts.SmartContractOptions)">
            <summary>
            This node will be configured with the reflection contract executor.
            <para>
            Should we require another executor, we will need to create a separate daemon and network.
            </para>
            </summary>
        </member>
        <member name="T:Xels.Bitcoin.Features.SmartContracts.SmartContractMempoolValidator">
            <summary>
            Provides the same functionality as the original mempool validator with some extra validation.
            </summary>
        </member>
        <member name="F:Xels.Bitcoin.Features.SmartContracts.SmartContractMempoolValidator.MinGasPrice">
            <summary>The "functional" minimum gas limit. Not enforced by consensus but miners are only going to pick transactions up if their gas price is higher than this.</summary>
        </member>
        <member name="T:Xels.Bitcoin.Features.SmartContracts.SmartContractScriptAddressReader">
            <summary>
            Smart contract specific logic to get the contract address from the <see cref="T:Xels.SmartContracts.CLR.ContractTxData"/>.
            </summary>
        </member>
        <member name="M:Xels.Bitcoin.Features.SmartContracts.SmartContractTransactionPolicy.CheckPubKey(NBitcoin.Transaction,System.Collections.Generic.List{NBitcoin.Policy.TransactionPolicyError})">
            <inheritdoc />
        </member>
        <member name="M:Xels.Bitcoin.Features.SmartContracts.SmartContractTransactionPolicy.CheckMinRelayTxFee(NBitcoin.Transaction,System.Collections.Generic.List{NBitcoin.Policy.TransactionPolicyError})">
            <inheritdoc />
        </member>
        <member name="M:Xels.Bitcoin.Features.SmartContracts.SmartContractVersionProvider.GetVersion">
            <inheritdoc />
        </member>
        <member name="T:Xels.Bitcoin.Features.SmartContracts.Wallet.SmartContractTransactionService">
            <summary>
            Shared functionality for building SC transactions.
            </summary>
        </member>
        <member name="M:Xels.Bitcoin.Features.SmartContracts.Wallet.SmartContractTransactionService.ReduceToRequestedInputs(System.Collections.Generic.IReadOnlyList{Xels.Bitcoin.Features.Wallet.Models.OutpointRequest},System.Collections.Generic.IReadOnlyList{NBitcoin.OutPoint})">
            <summary>
            Reduces the selectedInputs to consist of only those asked for by the request, or leaves them the same if none were requested.
            </summary>
            <returns>The new list of outpoints.</returns>
        </member>
        <member name="M:Xels.Bitcoin.Features.SmartContracts.Wallet.SmartContractWalletController.GetAccountAddresses(System.String)">
            <summary>
            Gets a smart contract account address.
            This is a single address to use for all smart contract interactions.
            Smart contracts send funds to and store data at this address. For example, an ERC-20 token
            would store tokens allocated to a user at this address, although the actual data
            could, in fact, be anything. The address stores a history of smart contract create/call transactions.   
            It also holds a UTXO list/balance based on UTXOs sent to it from smart contracts or user wallets.
            Once a smart contract has written data to this address, you need to use the address to
            provide gas and fees for smart contract calls involving that stored data (for that smart contract deployment).
            In the case of specific ERC-20 tokens allocated to you, using this address would be
            a requirement if you were to, for example, send some of the tokens to an exchange.  
            It is therefore recommended that in order to keep an intact history and avoid complications,
            you use the single smart contract address provided by this function for all interactions with smart contracts.
            In addition, a smart contract address can be used to identify a contract deployer.
            Some methods, such as a withdrawal method on an escrow smart contract, should only be executed
            by the deployer, and in this case, it is the smart contract account address that identifies the deployer.
             
            Note that this account differs from "account 0", which is the "default
            holder of multiple addresses". Other address holding accounts can be created,
            but they should not be confused with the smart contract account, which is represented
            by a single address.
            </summary>
            
            <param name="walletName">The name of the wallet to retrieve a smart contract account address for.</param>
            
            <returns>A smart contract account address to use for the wallet.</returns>
        </member>
        <member name="M:Xels.Bitcoin.Features.SmartContracts.Wallet.SmartContractWalletController.GetAddressBalance(System.String)">
             <summary>
             Gets the balance at a specific wallet address in STRAT (or the sidechain coin).
             This method gets the UTXOs at the address that the wallet can spend.
             The function can be used to query the balance at a smart contract account address
             supplied by /api/SmartContractWallet/account-addresses.
             </summary>
            
             <param name="walletName">The address at which to retrieve the balance.</param>
             
             <returns>The balance at a specific wallet address in STRAT (or the sidechain coin).</returns>
        </member>
        <member name="M:Xels.Bitcoin.Features.SmartContracts.Wallet.SmartContractWalletController.GetHistory(Xels.Bitcoin.Features.SmartContracts.Models.GetHistoryRequest)">
             <summary>
             Gets the history of a specific wallet address.
             This includes the smart contract create and call transactions
             This method can be used to query the balance at a smart contract account address
             supplied by /api/SmartContractWallet/account-addresses. Indeed,
             it is advisable to use /api/SmartContractWallet/account-addresses
             to generate an address for all smart contract interactions.
             If this has been done, and that address is supplied to this method,
             a list of all smart contract interactions for a wallet will be returned.
             </summary>
            
             <param name="walletName">The name of the wallet holding the address.</param>
             <param name="address">The address to retrieve the history for.</param>
             <returns>A list of smart contract create and call transaction items as well as transaction items at a specific wallet address.</returns>
        </member>
        <member name="M:Xels.Bitcoin.Features.SmartContracts.Wallet.SmartContractWalletController.Create(Xels.Bitcoin.Features.SmartContracts.Models.BuildCreateContractTransactionRequest)">
            <summary>
            Builds a transaction to create a smart contract and then broadcasts the transaction to the network.
            If the deployment is successful, methods on the smart contract can be subsequently called.
            </summary>
            
            <param name="request">An object containing the necessary parameters to build the transaction.</param>
            
            <returns>A hash of the transaction used to create the smart contract. The result of the transaction broadcast is not returned,
            and you should check for a transaction receipt to see if it was successful.</returns>
        </member>
        <member name="M:Xels.Bitcoin.Features.SmartContracts.Wallet.SmartContractWalletController.Call(Xels.Bitcoin.Features.SmartContracts.Models.BuildCallContractTransactionRequest)">
             <summary>
             Builds a transaction to call a smart contract method and then broadcasts the transaction to the network.
             If the call is successful, any changes to the smart contract balance or persistent data are propagated
             across the network.
             </summary>
             
             <param name="request">An object containing the necessary parameters to build the transaction.</param>
            
             <returns>The transaction used to call a smart contract method. The result of the transaction broadcast is not returned,
             and you should check for a transaction receipt to see if it was successful.</returns>
        </member>
        <member name="M:Xels.Bitcoin.Features.SmartContracts.Wallet.SmartContractWalletController.SendTransaction(Xels.Bitcoin.Features.Wallet.Models.SendTransactionRequest)">
            <summary>
            Broadcasts a transaction, which either creates a smart contract or calls a method on a smart contract.
            If the contract deployment or method call are successful gas and fees are consumed.
            </summary>
            
            <param name="request">An object containing the necessary parameters to send the transaction.</param>
            
            <returns>A model of the transaction which the Broadcast Manager broadcasts. The result of the transaction broadcast is not returned,
            and you should check for a transaction receipt to see if it was successful.</returns>
        </member>
        <member name="M:Xels.Bitcoin.Features.SmartContracts.Wallet.SmartContractWalletController.GetAddressFromScriptPubKey(NBitcoin.TxOut)">
            <summary>
            Retrieves a string that represents the receiving address for an output.For smart contract transactions,
            returns the opcode that was sent i.e.OP_CALL or OP_CREATE
            </summary>
        </member>
        <member name="M:Xels.Bitcoin.Features.SmartContracts.Wallet.SmartContractWalletFeature.#ctor(Xels.Bitcoin.Features.Wallet.Broadcasting.BroadcasterBehavior,NBitcoin.ChainIndexer,Xels.Bitcoin.Connection.IConnectionManager,Microsoft.Extensions.Logging.ILoggerFactory,Xels.Bitcoin.Features.Wallet.Interfaces.IWalletManager,Xels.Bitcoin.Features.Wallet.Interfaces.IWalletSyncManager,Xels.Bitcoin.Utilities.INodeStats)">
            <summary>
            Initializes a new instance of the <see cref="T:Xels.Bitcoin.Features.Wallet.WalletFeature"/> class.
            </summary>
            <param name="broadcasterBehavior">The broadcaster behavior.</param>
            <param name="chainIndexer">The chain of blocks.</param>
            <param name="connectionManager">The connection manager.</param>
            <param name="walletManager">The wallet manager.</param>
            <param name="walletSyncManager">The synchronization manager for the wallet, tasked with keeping the wallet synced with the network.</param>
        </member>
        <member name="M:Xels.Bitcoin.Features.SmartContracts.Wallet.SmartContractWalletFeature.InitializeAsync">
            <inheritdoc />
        </member>
        <member name="M:Xels.Bitcoin.Features.SmartContracts.Wallet.SmartContractWalletFeature.Dispose">
            <inheritdoc />
        </member>
        <member name="M:Xels.Bitcoin.Features.SmartContracts.Wallet.SmartContractWalletTransactionHandler.InitializeTransactionBuilder(Xels.Bitcoin.Features.Wallet.TransactionBuildContext)">
            <summary>
            The initialization of the builder is overridden as smart contracts calls allow dust and does not group
            inputs by ScriptPubKey.
            </summary>
        </member>
        <member name="M:Xels.Bitcoin.Features.SmartContracts.Wallet.SmartContractWalletTransactionHandler.AddRecipients(Xels.Bitcoin.Features.Wallet.TransactionBuildContext)">
            <summary>
            Adjusted to allow smart contract transactions with zero value through.
            </summary>
        </member>
    </members>
</doc>
